import esimport xaimport xa.languageimport xa.loggingimport xa.settingimport playerlibimport popuplibfrom xa import xa#plugin informationinfo = es.AddonInfo()info.name = "XA:Punishments"info.version = "0.1"info.author = "Hunter"info.url = "http://forums.mattie.info"info.description = "Clone of Mani Player Punishments feature for XA"info.tags = "admin punishments players"punishment_choice = {}punishment_method = {}xapunishments = xa.register('xapunishments')xa_adminburn_anonymous = xa.setting.createVariable(xapunishments, 'adminburn_anonymous', 0)xa_adminslap_anonymous = xa.setting.createVariable(xapunishments, 'adminslap_anonymous', 0)xa_adminslay_anonymous = xa.setting.createVariable(xapunishments, 'adminslay_anonymous', 0)xa_admin_burn_time = xa.setting.createVariable(xapunishments, 'admin_burn_time', 20)xa_slap_to_damage = xa.setting.createVariable(xapunishments, 'slap_to_damage', 10)def load():    #Load Function for Player Settings for XA.    xapunishments = xa.find('xapunishments')        xapunishmentmenu = popuplib.easymenu("xapunishmentmenu", "_tempcore", _select_punishment)    xapunishmentmenu.c_titleformat = str('Choose Punishment') + (" "*(30-len(str('Choose Punishment')))) + " (%p/%t)"    xapunishments.addMenu("xapunishmentmenu", "Punish Players", "xapunishmentmenu", "punish_player", "#admin")        xapunishtargetmenu = popuplib.easymenu("xapunishtargetmenu", "_tempcore", _select_target)    xapunishtargetmenu.c_titleformat = str('Choose Target') + (" "*(30-len(str('Choose Target')))) + " (%p/%t)"    xapunishtargetmenu.addoption("player", "Select Player")    xapunishtargetmenu.addoption("team3", "Counter Terrorists")    xapunishtargetmenu.addoption("team2", "Terrorists")    xapunishtargetmenu.addoption("all", "All Players")        registerPunishment("burn", "Burn", _punishment_burn)    registerPunishment("slap", "Slap", _punishment_slap)    registerPunishment("slay", "Slay", _punishment_slay)def unload():    unRegisterPunishment("burn")    unRegisterPunishment("slap")    unRegisterPunishment("slay")    popuplib.delete("xapunishmentmenu")    popuplib.delete("xapunishtargetmenu")    xa.unRegister('xapunishments')    def _select_punishment(userid, choice, name):    punishment_choice[userid] = choice    popuplib.send("xapunishtargetmenu", userid)    def _select_target(userid, choice, name):    if choice == "player":        menu = popuplib.construct("xapunishplayermenu", "players", "#alive")        menu.menuselectfb = _select_player        menu.send(userid)    else:        if choice == "team3":            playerlist = playerlib.getUseridList("#ct")        elif choice == "team2":            playerlist = playerlib.getUseridList("#t")        elif choice == "all":            playerlist = es.getUseridList()        for player in playerlist:            _punish_player(player, punishment_choice[userid], userid)            def _select_player(userid, choice, name):    _punish_player(choice, punishment_choice[userid], userid)def _punish_player(userid, punishment, adminid):    if callable(punishment_method[punishment]):        xa.logging.log('xapunishments', "Admin "+str(adminid)+ " used punishment "+str(punishment)+" on player "+str(userid))        punishment_method[punishment](userid, adminid)    else:        es.dbgmsg(0, "xapunishments.py: Cannot find method '"+str(punishment_method[punishment])+"'!")def registerPunishment(punishment, name, method):    if not punishment in punishment_method:        punishment_method[punishment] = method        xapunishmentmenu = popuplib.find("xapunishmentmenu")        xapunishmentmenu.addoption(punishment, name, 1)        return True    else:        return False    def unRegisterPunishment(punishment):    if punishment in punishment_method:        punishment_method.remove(punishment)        xapunishmentmenu = popuplib.find("xapunishmentmenu")        xapunishmentmenu.addoption(punishment, name, 0)        return True    else:        return False        def punishPlayer(punishment, userid, adminid):    if punishment in punishment_method:        _punish_player(userid, punishment, adminid)        return True    else:        return False# The default punishments that ship with the moduledef _punishment_burn(userid, adminid):    if str(xa_adminburn_anonymous) == '0':        es.msg("Admin "+str(es.getplayername(adminid))+" burned player "+str(es.getplayername(userid)))    # TODO: need to add burn time    es.server.cmd("es_fire "+str(userid)+" !self Ignite")def _punishment_slap(userid, adminid):    if str(xa_adminslap_anonymous) == '0':        es.msg("Admin "+str(es.getplayername(adminid))+" slapped player "+str(es.getplayername(userid))+" to "+str(xa_slap_to_damage)+" health")    es.server.cmd("es_fire "+str(userid)+" !self SetHealth "+str(xa_slap_to_damage))    player = playerlib.getPlayer(userid)    player.set("health", str(xa_slap_to_damage))def _punishment_slay(userid, adminid):    if str(xa_adminslay_anonymous) == '0':        es.msg("Admin "+str(es.getplayername(adminid))+" slayed player "+str(es.getplayername(userid)))    es.sexec(userid, "kill")